#!/usr/bin/env python3

from sys import argv, exit
from math import exp, sqrt

def help(program) -> None:
    print("USAGE")
    print(f"    {program} a")
    print()
    print("DESCRIPTION")
    print("    a       constant (between 0 and 2.5)")

def contains_help(args: list[str]) -> bool:
    for arg in args:
        if arg == "-h":
            return True
    return False

def parse_args(args: list[str]) -> float | None:
    if (len(args) != 1):
        return None

    try:
        return float(args[0])
    except:
        return None

def compute_percentage(a: float, t1: float, t2: float) -> float:
    """
    Computes the integral of the function
    f(x) = a*e^(-t) + (4 - 3*a)*e^(-2*t) + (2*a - 4) * e^(-4*t)
    between t1 and t2
    """

    y1 = (-1/2) * exp(-4 * t1) * (a * (2 * exp(t1) + 1) * ((exp(t1) - 1) ** 2) + 4 * exp(2 * t1) - 2)
    y2 = (-1/2) * exp(-4 * t2) * (a * (2 * exp(t2) + 1) * ((exp(t2) - 1) ** 2) + 4 * exp(2 * t2) - 2)

    return y2 - y1

def compute_average(a: float, t1: float, t2: float) -> float:
    """
    Computes the integral of the function
    f(x) = t * (a*e^(-t) + (4 - 3*a)*e^(-2*t) + (2*a - 4) * e^(-4*t))
    between t1 and t2
    """

    y1 = (1/8)*exp(-4*t1)*(-a*(4*t1+8*exp(3*t1)*(t1+1)-6*exp(2*t1)*(2*t1+1)+1)+8*t1-8*exp(2*t1)*(2*t1+1)+2)
    y2 = (1/8)*exp(-4*t2)*(-a*(4*t2+8*exp(3*t2)*(t2+1)-6*exp(2*t2)*(2*t2+1)+1)+8*t2-8*exp(2*t2)*(2*t2+1)+2)

    return y2 - y1

def compute_variance(a: float, b: float, t1: float, t2: float) -> float:
    """
    Computes the integral of the function
    f(x) = (t - b)^2 * (a*e^(-t) + (4 - 3*a)*e^(-2*t) + (2*a - 4) * e^(-4*t))
    between t1 and t2
    """

    y1 = -a * exp(-t1) * (b**2 - 2*b*t1 - 2*b + t1**2 + 2*t1 + 2) \
        + 1/4 * (3*a - 4) * exp(-2*t1) * (2*b**2 - 4*b*t1 - 2*b + 2*t1**2 + 2*t1 + 1) \
        - 1/16 * (a-2) * exp(-4*t1) * (8*b**2 - 16*b*t1 - 4*b + 8*t1**2 + 4*t1 + 1)
    
    y2 = -a * exp(-t2) * (b**2 - 2*b*t2 - 2*b + t2**2 + 2*t2 + 2) \
        + 1/4 * (3*a - 4) * exp(-2*t2) * (2*b**2 - 4*b*t2 - 2*b + 2*t2**2 + 2*t2 + 1) \
        - 1/16 * (a-2) * exp(-4*t2) * (8*b**2 - 16*b*t2 - 4*b + 8*t2**2 + 4*t2 + 1)

    return y2 - y1

def compute_min(a: float, percentage: float) -> float:
    t1 = 0
    t2 = 0.001
    percentage /= 100

    while compute_percentage(a, t1, t2) < percentage:
        t2 += 0.001

    return t2

def main(program: str, args: list[str]) -> None:
    if contains_help(args):
        help(program)
        exit(0)

    a = parse_args(args)

    if a == None or a < 0 or a > 2.5:
        help(program)
        exit(84)

    average = compute_average(a, 0, 50)
    average_min = int(average)
    average_sec = int(round((average - average_min) * 60))
    print(f"Average return time: {average_min}m {average_sec:02d}s")

    variance = compute_variance(a, average, 0, 50)
    stdev = round(sqrt(variance), 3)
    print(f"Standard deviation: {stdev:.3f}")

    min_50 = compute_min(a, 50)
    min_50_min = int(min_50)
    min_50_sec = int(round((min_50 - min_50_min) * 60))
    print(f"Time after which 50% of the ducks are back: {min_50_min}m {min_50_sec:02d}s")

    min_99 = compute_min(a, 99)
    min_99_min = int(min_99)
    min_99_sec = int(round((min_99 - min_99_min) * 60))
    print(f"Time after which 99% of the ducks are back: {min_99_min}m {min_99_sec:02d}s")

    after_1m = round(compute_percentage(a, 0, 1) * 100, 1)
    print(f"Percentage of ducks back after 1 minute: {after_1m:.1f}%")

    after_2m = round(compute_percentage(a, 0, 2) * 100, 1)
    print(f"Percentage of ducks back after 2 minutes: {after_2m:.1f}%")

if __name__ == "__main__":
    main(argv[0], argv[1:])
