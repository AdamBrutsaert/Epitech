env:
  EXECUTABLE_NAME: "my_rpg"
  AUTHORIZED_FUNCTIONS: "malloc,free,memset,rand,srand,getline,stat,open,fopen,read,fread,close,fclose,write,fwrite,opendir,readdir,closedir"
  LIB_MATHS_FUNCTIONS: "abs,labs,llabs,fabs,div,ldiv,lldiv,fmod,remainder,remquo,fma,fmax,fmin,fdim,nan,nanf,nanl,exp,exp2,expm1,log,log2,log10,log1p,ilogb,logb,sqrt,cbrt,hypot,pow,sin,cos,tan,asin,acos,atan,atan2,sinh,cosh,tanh,asinh,acosh,atanh,erf,erfc,lgamma,tgamma,ceil,floor,trunc,round,lround,llround,nearbyint,rint,lrint,llrint,frexp,ldexp,modf,scalbn,scalbln,nextafter,nexttoward,copysign,fpclassify,isfinite,isinf,isnan,isnormal,signbit,feclearexcept,fegetenv,fegetexceptflag,fegetrount,feholdexcept,feraiseexcept,fesetenv,fesetexceptflag,fesetround,fetestexcept,feupdateenv,cabs,carg,cimag,creal,cong,cproj,cexp,clog,csqrt,cpow,csin,ccos,ctan,casin,cacos,catan,csinh,ccosh,ctanh,casing,cacosh,catanh,cerf,cerfc"
  LIBS_TO_CHECK: "GLIBC,GLIBC-MATHS"
  MAX_REPO_SIZE: 30

name: Build & Test

on:
  workflow_dispatch:

jobs:
  check-files:
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event.pull_request.base.ref != 'main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check useless files
        run: |
          ERR=0
          for FILE in $(find . -type f -name "*.o" -o -name "*~" -o -name "*.a" -o -name "*.gc*" -o -name "*#*#"); do
              echo "::error file=$FILE::File $FILE is not allowed"
              ERR=1
          done
          exit $ERR
      - name: Check repository size
        run: |
          SIZE=$(du -sm . | awk '{print $1}')
          if [[ "$SIZE" -gt $MAX_REPO_SIZE ]]; then
              echo "::error::Repository size is too big (got $SIZE MB with max of $MAX_REPO_SIZE MB)"
              exit 1
          fi
  check-coding-style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    continue-on-error: ${{ github.event.pull_request.base.ref != 'main' }}
    needs:
      - check-files
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check coding style
        run: /usr/local/bin/check.sh $(pwd) $(pwd)
      - name: Annotate coding-style errors
        run: |
          has_errors=0
          while IFS= read -r line; do
              filename=$(echo "$line" | cut -d':' -f1)
              line_pos=$(echo "$line" | cut -d':' -f2)
              severity=$(echo "$line" | cut -d':' -f3 | sed -e 's/^[[:space:]]*//')
              type=$(echo "$line" | cut -d':' -f4)
              if [[ $severity == illegal* ]]; then
                  continue
              fi
              echo "::error file=$filename,line=$line_pos,title=$severity $type::$severity: $type at $filename:$line_pos"
              has_errors=1
          done < coding-style-reports.log
          if [ $has_errors -eq 1 ]; then
              echo "There are coding style errors!"
              exit 1
          fi
  check-cleanability:
    runs-on: ubuntu-latest
    container:
      image: registry.codinbox.fr/epitech/epitest-mirror:main
    continue-on-error: ${{ github.event.pull_request.base.ref != 'main' }}
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check cleanability
        run: |
          INIT_TREE=$(tree -a --charset=ascii)
          make all fclean
          FINAL_TREE=$(tree -a --charset=ascii)
          if [[ "$INIT_TREE" != "$FINAL_TREE" ]]; then
              echo "::error::Makefile is not cleanable"
              exit 1
          fi
  build:
    runs-on: ubuntu-latest
    container:
      image: registry.codinbox.fr/epitech/epitest-mirror:main
    continue-on-error: false
    needs:
      - check-files
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: make
      - name: Check executable
        run: ls -l ./$EXECUTABLE_NAME
      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.EXECUTABLE_NAME }}
          path: ./${{ env.EXECUTABLE_NAME }}
  check-banned-functions:
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event.pull_request.base.ref != 'main' }}
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.EXECUTABLE_NAME }}
      - name: Check banned functions
        run: |
          AUTHORIZED_FUNCTIONS="${{ env.AUTHORIZED_FUNCTIONS }}"
          # Check if GLIBC-MATHS is a library to check, if so, append all
          # LIB_MATHS_FUNCTIONS to the list of authorized functions
          if [[ $LIBS_TO_CHECK == *"GLIBC-MATHS"* ]]; then
            echo "Maths library detected"
            AUTHORIZED_FUNCTIONS="$AUTHORIZED_FUNCTIONS,$LIB_MATHS_FUNCTIONS"
            # Add all lib maths function but add 'f' suffix to them
            for F in $(echo $LIB_MATHS_FUNCTIONS | tr "," " "); do
              AUTHORIZED_FUNCTIONS="$AUTHORIZED_FUNCTIONS,${F}f"
            done
            # Add all lib maths function but add 'l' suffix to them
            for F in $(echo $LIB_MATHS_FUNCTIONS | tr "," " "); do
              AUTHORIZED_FUNCTIONS="$AUTHORIZED_FUNCTIONS,${F}l"
            done
          fi
          echo "New authorized functions: $AUTHORIZED_FUNCTIONS"
          FUNCS=$(nm -g ./${{ env.EXECUTABLE_NAME }})
          ERR=0
          while IFS= read -r line; do
            TYPE=$(tr -s ' ' <<< "$line" | cut -d ' ' -f 2)
            if [[ "$TYPE" != "U" && "$TYPE" != "u" ]]; then
              continue
            fi
            FUNC=$(tr -s ' ' <<< "$line" | cut -d ' ' -f 3)
            if [[ "$FUNC" != *"@"* ]]; then
              continue
            fi
            LIB=$(cut -d '@' -f 2 <<< "$FUNC")
            FUNC_NAME=$(cut -d '@' -f 1 <<< "$FUNC")
            if [[ "$FUNC_NAME" == "_"* ]]; then
              continue
            fi
            echo "Detected function $FUNC_NAME in library $LIB"
            AUTHORIZED=0
            for L in $(echo ${{ env.LIBS_TO_CHECK }} | tr "," " "); do
              if [[ "$LIB" == "$L"* ]]; then
                for F in $(echo $AUTHORIZED_FUNCTIONS | tr "," " "); do
                  if [[ "$FUNC_NAME" == "$F" ]]; then
                    AUTHORIZED=1
                    break 2
                  fi
                done
              fi
            done
            if [[ "$AUTHORIZED" == "0" ]]; then
              echo "::error::Function $FUNC_NAME in library $LIB is not authorized"
              ERR=1
            fi
          done <<< "$FUNCS"
          exit $ERR
